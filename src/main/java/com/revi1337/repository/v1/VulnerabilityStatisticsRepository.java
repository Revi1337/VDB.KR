package com.revi1337.repository.v1;

import com.revi1337.dto.response.statistics.TotalAttackVectorResponse;
import com.revi1337.dto.response.statistics.TotalByYearResponse;
import jakarta.persistence.EntityManager;
import jakarta.persistence.PersistenceContext;
import org.springframework.stereotype.Repository;

import java.util.List;

@Repository
public class VulnerabilityStatisticsRepository {

    @PersistenceContext EntityManager entityManager;

    public TotalByYearResponse searchTotalVulnerabilityBySpecifiedYear(int year) {
        return entityManager
                .createQuery(
                        "select new com.revi1337.dto.response.statistics.TotalByYearResponse(:year, count(v)) from Vulnerability as v" +
                                " where function('year', v.published) = :year", TotalByYearResponse.class)
                .setParameter("year", year)
                .getSingleResult();
    }

    public List<TotalByYearResponse> searchTotalVulnerabilityByEachAllYear() {
        return entityManager
                .createQuery(
                        "select new com.revi1337.dto.response.statistics.TotalByYearResponse(function('year', v.published), count(v))" +
                        " from Vulnerability as v" +
                        " group by function('year', v.published)", TotalByYearResponse.class)
                .getResultList();
    }

    public List<String> searchExistsAttackVectors() {
        return entityManager
                .createQuery("select m.attackVector from Metrix as m group by m.attackVector", String.class)
                .getResultList();
    }

    public TotalAttackVectorResponse searchTotalVulnerabilityBySpecifiedAttackVector(String attackVector) {
        return entityManager.createQuery(
                        "select new com.revi1337.dto.response.statistics.TotalAttackVectorResponse(:attackVector, count(m))" +
                                " from Metrix as m" +
                                " where m.attackVector = :attackVector", TotalAttackVectorResponse.class)
                .setParameter("attackVector", attackVector)
                .getSingleResult();
    }

    public List<TotalAttackVectorResponse> searchTotalVulnerabilityByEachAllAttackVector() {
        return entityManager.createQuery(
                        "select" +
                                " new com.revi1337.dto.response.statistics.TotalAttackVectorResponse(m.attackVector, count(m.attackVector))" +
                                " from Metrix as m" +
                                " group by m.attackVector", TotalAttackVectorResponse.class)
                .getResultList();
    }

}
