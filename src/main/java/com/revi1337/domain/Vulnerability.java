package com.revi1337.domain;

import jakarta.persistence.*;
import lombok.*;

import java.util.ArrayList;
import java.util.List;
import java.util.Objects;

@NoArgsConstructor(access = AccessLevel.PROTECTED)
@AllArgsConstructor(access = AccessLevel.PRIVATE)
@Entity @Getter @ToString
@Table(
        name = "VULNERABILITY",
        uniqueConstraints = {
                @UniqueConstraint(name = "cveID", columnNames = "CVE_ID")
        }
)
//@Table(
//        name = "VULNERABILITY"
//)
public class Vulnerability {

    @Id @GeneratedValue(strategy = GenerationType.SEQUENCE)
    @Column(name = "VULNERABILITY_ID")
    private Long id;

    @Column(name = "CVE_ID", nullable = false)
    private String cveId;

    @Column(name = "PUBLISHED", nullable = false)
    private String published;

    @Lob
    @Column(name = "DESCRIPTION", nullable = false)
    private String description;

    @Setter(AccessLevel.PACKAGE)
    @OneToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "METRIX_ID")
    private Metrix metrix;

    @ToString.Exclude
    @OneToMany(mappedBy = "vulnerability", cascade = CascadeType.ALL)
    private List<Weakness> weaknesses = new ArrayList<>();

    @Builder(builderMethodName = "create")
    public Vulnerability(Long id, String cveId, String published, String description, Metrix metrix) {
        this.id = id;
        this.cveId = cveId;
        this.published = published;
        this.description = description;
        this.metrix = metrix;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof Vulnerability that)) return false;
        return cveId != null && Objects.equals(cveId, that.cveId);
    }

    @Override
    public int hashCode() {
        return Objects.hash(cveId);
    }

    ///////////////////////////// CONVINIENT METHODS /////////////////////////////

    public void addWeakness(Weakness weakness) {
        this.weaknesses.add(weakness);
        weakness.setVulnerability(this);
    }

}
