package com.revi1337.domain;

import com.revi1337.repository.MetrixRepository;
import com.revi1337.repository.VulnerabilityRepository;
import jakarta.persistence.EntityManager;
import jakarta.persistence.PersistenceContext;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.jdbc.AutoConfigureTestDatabase;
import org.springframework.boot.test.autoconfigure.orm.jpa.DataJpaTest;
import org.springframework.test.annotation.Commit;


@Disabled
@AutoConfigureTestDatabase(replace = AutoConfigureTestDatabase.Replace.NONE)
@DataJpaTest(showSql = false) @Commit
class VulnerabilityTest {

    private final VulnerabilityRepository vulnerabilityRepository;

    private final MetrixRepository metrixRepository;

    @PersistenceContext EntityManager entityManager;

    @Autowired
    public VulnerabilityTest(
            VulnerabilityRepository vulnerabilityRepository, MetrixRepository metrixRepository
    ) {
        this.vulnerabilityRepository = vulnerabilityRepository;
        this.metrixRepository = metrixRepository;
    }

    @Test
    public void createEntityTest() {
        Score score = createScore(3.9f, 3.9f, 3.9f, "HIGH");
        PrejudiceEffect prejudiceEffect = createPrejudiceEffect("HIGH", "MEDIUM", "LOW");
        Metrix metrix = createMetrix(prejudiceEffect, score);
        metrixRepository.save(metrix);

        Vulnerability vulnerability = createVulnerability("CVE-2017-0144", "eternalblue", "date", metrix);
        vulnerabilityRepository.save(vulnerability);

        PrejudiceEffect prejudiceEffect1 = vulnerability.getMetrix().getPrejudiceEffect();
        System.out.println("prejudiceEffect1 = " + prejudiceEffect1);
    }

    public PrejudiceEffect createPrejudiceEffect(String confidentialityEffect, String availabilityEffect, String integrityEffect) {
        return PrejudiceEffect.create()
                .confidentialityEffect(confidentialityEffect)
                .availabilityEffect(availabilityEffect)
                .integrityEffect(integrityEffect)
                .build();
    }

    public Score createScore(float impactScore, float exploitabilityScore, float baseScore, String baseSeverity) {
        return Score.create()
                .impactScore(impactScore)
                .baseSeverity(baseSeverity)
                .exploitabilityScore(exploitabilityScore)
                .baseScore(baseScore)
                .build();
    }

    public Metrix createMetrix(PrejudiceEffect prejudiceEffect, Score score) {
        return Metrix.create()
                .vectorString("asdasds")
                .attackComplex("MEDIUM")
                .attackVector("MEDIUM")
                .privilegeRequired("NONE")
                .scope("UNCGHANGED")
                .prejudiceEffect(prejudiceEffect)
                .score(score)
                .build();
    }

    public Vulnerability createVulnerability(String cveId, String description, String published, Metrix metrix) {
        return Vulnerability.create()
                .cveId("CVE-2017-0144")
                .description("asd")
                .published("asdas")
                .metrix(metrix)
                .build();
    }

}