package com.revi1337.repository.v1;

import com.revi1337.QueryDslTestConfig;
import com.revi1337.config.domain.JPAConfig;
import com.revi1337.dto.response.statistics.TotalAttackVectorResponse;
import com.revi1337.dto.response.statistics.TotalByYearResponse;
import jakarta.persistence.EntityManager;
import jakarta.persistence.PersistenceContext;
import jakarta.persistence.Tuple;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;
import org.springframework.boot.test.autoconfigure.jdbc.AutoConfigureTestDatabase;
import org.springframework.boot.test.autoconfigure.orm.jpa.DataJpaTest;
import org.springframework.context.annotation.Import;
import org.springframework.test.annotation.Commit;

import java.util.List;

import static org.junit.jupiter.api.Assertions.*;

@Import({JPAConfig.class, QueryDslTestConfig.class})
@AutoConfigureTestDatabase(replace = AutoConfigureTestDatabase.Replace.NONE)
@DataJpaTest(showSql = false) @Commit
class VulnerabilityStatisticsRepositoryTest {

    @PersistenceContext
    EntityManager entityManager;

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    @Test
    @DisplayName(value = """
        [Repository : 모든 연도에 존재하는 CVE 개수 조회 - via JPQL (RAW)]
        [NATIVE SQL : select year(published) as result, count(*) from vulnerability group by year(published);]
    """)
    public void searchAllYearTotalByRAWJPQL() {
        List<Tuple> resultList = entityManager.createQuery(
                        "select function('year', v.published) as result, count(v) as total" +
                                " from Vulnerability as v" +
                                " group by function('year', v.published)", Tuple.class)
                .getResultList();
        for (Tuple tuple : resultList) {
            System.out.println(tuple.get(0) + " : " + tuple.get(1));
        }
    }

    @Test
    @DisplayName(value = """
        [Repository : 모든 연도에 존재하는 CVE 개수 조회 - via JPQL (new Projection)]
        [NATIVE SQL : select year(published) as result, count(*) from vulnerability group by year(published);]
    """)
    public void searchAllYearTotalByJPQLNewProjection() {
        List<TotalByYearResponse> resultList = entityManager.createQuery(
                        "select new com.revi1337.dto.response.statistics.TotalByYearResponse(function('year', v.published), count(v))" +
                                " from Vulnerability as v" +
                                " group by function('year', v.published)", TotalByYearResponse.class)
                .getResultList();
        for (TotalByYearResponse totalByYearResponse : resultList) {
            System.out.println("totalByYearResponse = " + totalByYearResponse);
        }
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    @Test
    @DisplayName(value = """
        [Repository : 특정한 연도에 존재하는 CVE 개수 조회 - via JPQL (RAW)]
        [Possible NATIVE SQL : select count(*) from vulnerability where YEAR(published) = 2010;]
    """)
    public void searchEachYearTotalByRAWJPQL() {
        Long specifiedYear = entityManager
                .createQuery("select count(v) from Vulnerability as v where function('year', v.published) = :year", Long.class)
                .setParameter("year", 2010)
                .getSingleResult();
        System.out.println("specifiedYear = " + specifiedYear);
    }

    @Test
    @DisplayName(value = """
        [Repository : 특정한 연도에 존재하는 CVE 개수 조회 - via JPQL (new Projection)]
        [Possible NATIVE SQL :
            select 2010 as result, count(*) from vulnerability where YEAR(published) = 2010;
            select year(published) as result, count(*) from vulnerability where year(published) = 2010 group by year(published);
        ]
    """)
    public void searchEachYearTotalByJPQLNewProjection() {
        TotalByYearResponse year = entityManager
                .createQuery(
                        "select new com.revi1337.dto.response.statistics.TotalByYearResponse(:year, count(v)) from Vulnerability as v" +
                                " where function('year', v.published) = :year", TotalByYearResponse.class)
                .setParameter("year", 2010)
                .getSingleResult();
        System.out.println("year = " + year);
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    @Test
    @DisplayName(value = """
        [Repository : 어떤 Attack Vector 들이 존재하는지 통계 - via JPQL (RAW)]
        [Possible NATIVE SQL : select m.attack_vector from metrix as m group by m.attack_vector;]
    """)
    public void searchExistsAttackVectorsTest() {
        List<String> resultList = entityManager
                .createQuery("select m.attackVector from Metrix as m group by m.attackVector", String.class)
                .getResultList();
        for (String s : resultList) {
            System.out.println("s = " + s);
        }
    }

    @Test
    @DisplayName(value = """
        [Repository : 특정 Attack Vector 를 갖는 취약점 개수 조회 - via JPQL (RAW)]
        [Possible NATIVE SQL :
            select 'NETWORK', count(*) from metrix where attack_vector = 'NETWORK';
        ]
    """)
    public void searchSpecifiedTotalCountBySpecifiedAttackVectorTest() {
        TotalAttackVectorResponse result = entityManager.createQuery(
                        "select" +
                                " new com.revi1337.dto.response.statistics.TotalAttackVectorResponse(:attackVector, count(m))" +
                                " from Metrix as m" +
                                " where m.attackVector = :attackVector", TotalAttackVectorResponse.class)
                .setParameter("attackVector", "NETWORK")
                .getSingleResult();

        System.out.println("result = " + result);
    }

    @Test
    @DisplayName(value = """
        [Repository : Attack Vector 별로 취약점 개수 조회하여 하나의 결과로 통합- via JPQL (RAW)]
        [Possible NATIVE SQL : select m.attack_vector, count(m.attack_vector) from metrix as m group by m.attack_vector;]
    """)
    public void searchAllTotalCountByAttackVectorTest() {
        List<TotalAttackVectorResponse> resultList = entityManager.createQuery(
                        "select" +
                                " new com.revi1337.dto.response.statistics.TotalAttackVectorResponse(m.attackVector, count(m.attackVector))" +
                                " from Metrix as m" +
                                " group by m.attackVector", TotalAttackVectorResponse.class)
                .getResultList();

        for (TotalAttackVectorResponse totalAttackVectorResponse : resultList) {
            System.out.println("totalAttackVectorResponse = " + totalAttackVectorResponse);
        }
    }

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}